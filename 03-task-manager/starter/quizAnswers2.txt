
1. In this lesson, you created a middleware function called asyncWrapper. Why?
	
The asyncWrapper is a function to handle asynchronous custom error response, and it is to avoid repetitive try-catch blocks in app.js

2. Suppose that you want to make sure that both a status code and an error message are sent back to the user when they request the URL for a task that does not exist. Assume that you’ve created a CustomAPIError class and an error handler that references that class. Complete the code:

const getTask = asyncWrapper(async (req, res, next) => {  
  const { id: taskID } = req.params;  
  const task = await Task.findOne({ _id: taskID });  
  if (!task) {  
    // MY CODE
	return next(createCustomError(`No task with id ${taskID}`. 404)) 
  }  
  res.status(200).json({ task });  
}); 